# This properties file allows POS to modify foundation.properties values.
groupname=foundation

# Set the FoundationObjectFactory instance.
FoundationObjectFactory=oracle.retail.stores.foundation.factory.FoundationObjectFactory

# Value for the URL stream handler factory that the TierLoader will set to the
# JVM. The protocol handler in foundation recognizes the "classpath" protocol.
# POS has its own factory set here that extends the Ice Browser's URL Stream
# Handler Factory. This recognizes both foundations "classpath" protocol and the
# required protocols for Ice Browser to enable cookies, SSL, and proxy servers.
#URLStreamHandlerFactory=oracle.retail.stores.pos.utility.classpath.ProtocolHandlerFactory

# workfile.dir sets the default location of some store generated files such as
# those created by the FileQueue class.
# NOTE: Windows file seperator characters "\" must be escaped like this
# "c:\\test".  The trailing file path seperator character is optional and if
# present will be stripped i.e. "c:\\test" is equivalent to "c:\\test\\"
workfile.dir=.

# defines the retry interval between checks of the liveness of cross referenced directories.
RMI.DIRECTORY.RECONNECT.INTERVAL=30000

# Queue related properties defining the file names, path, and extensions
QueueFileExtension=.queue
TempQueueFileExtension=.tmp
QueueFilePath=.
TransactionQueue=TransactionQueue
DBJournalQueue=DBJournalQueue
JMSJournalQueue=JMSJournalQueue

# Hard totals related properties defining the file name, path, and extension
HardTotalsFileName=defaultHardTotals
HardTotalsFilePath=.

# strict tourmap: cause an exception if there is 
# not an entry in the tourmap file
tourmap.strict=true
# comma delimited list of tourmap files to overlay
#tourmap.files=tourmap.xml,another.tourmap.xml
tourmap.files=tourmap.xml,maxtourmap.xml

# If true, the tour framework should throw an IllegalArgumentException when a
# letter cannot be matched to a road or aisle. Otherwise, a warning is logged.
NoDestinationLettersCauseExceptions=true

# Following are SSL properties that only work when EncryptValets is set to true.

# replace $KEYSTORE_FILE$ with the location and name of the keystore file
# for example C:\\jdk1.5.0_12\\jre\\lib\\security\\pos
#javax.net.ssl.keyStore=$KEYSTORE_FILE$

# replace $KEYSTORE_PASSWORD$ with the password for the keystore file. Prefix
# the password with ! so it can be encrypted. For example: !changeit
#javax.net.ssl.keyStorePassword=$KEYSTORE_PASSWORD$


# trustStore is the file that resides on the client that holds the public
# certificate imported from the server. Populate this property ONLY if you don't
# want to use the default truststore, cacerts file, or the jssecacerts file that
# are located in the jre/lib/security folder. If the below property is not
# populated, Java will look for your certificate in jssecacerts file and if the
# certificate is not found there will look into the cacerts file.

# NOT REQUIRED if certificate imported into cacerts or jssecacerts.
# replace $TRUSTSTORE_FILE$ with the location and name of the truststore file
# for example C:\\jdk1.5.0_12\\jre\\lib\\security\\posclient
#javax.net.ssl.trustStore=$TRUSTSTORE_FILE$

# replace $TRUSTSTORE_PASSWORD$ with the password for the truststore file.
# Prefix the password with ! so it can be encrypted. For example: !changeit
#javax.net.ssl.trustStorePassword=$TRUSTSTORE_PASSWORD$
