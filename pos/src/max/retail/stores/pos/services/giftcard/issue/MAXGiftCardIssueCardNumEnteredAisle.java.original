/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   Copyright (c) 2012 - 2013 MAXHyperMarket, Inc.    All Rights Reserved.
   Rev 1.2  17/Jul/2013	Jyoti Rawal  Bug 7197 - GC- Issue Receipt of Activation Failed fro QC should be printed 
   	Rev 1.1  06/Jun/2013	Jyoti Rawal  Fix for Bug 6192 GC Issue - Error Message is not proper while QC is Offline
  	Rev 1.0  15/Apr/2013	Jyoti Rawal, Initial Draft: Changes for Gift Card Functionality 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

package com.max.pos.services.giftcard.issue;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Locale;

import com._360commerce.commerceservices.common.currency.CurrencyIfc;
import com._360commerce.common.utility.Util;
import com._360commerce.pos.services.common.CommonLetterIfc;
import com.extendyourstore.domain.DomainGateway;
import com.extendyourstore.domain.lineitem.SaleReturnLineItemIfc;
import com.extendyourstore.domain.stock.GiftCardPLUItem;
import com.extendyourstore.domain.stock.ProductGroupConstantsIfc;
import com.extendyourstore.domain.transaction.RetailTransactionIfc;
import com.extendyourstore.domain.utility.LocaleConstantsIfc;
import com.extendyourstore.foundation.manager.ifc.JournalManagerIfc;
import com.extendyourstore.foundation.manager.ifc.ParameterManagerIfc;
import com.extendyourstore.foundation.manager.ifc.UIManagerIfc;
import com.extendyourstore.foundation.manager.parameter.ParameterException;
import com.extendyourstore.foundation.tour.application.Letter;
import com.extendyourstore.foundation.tour.gate.Gateway;
import com.extendyourstore.foundation.tour.ifc.BusIfc;
import com.extendyourstore.foundation.tour.ifc.LetterIfc;
import com.extendyourstore.foundation.utility.LocaleMap;
import com.extendyourstore.pos.manager.ifc.UtilityManagerIfc;
import com.extendyourstore.pos.services.PosLaneActionAdapter;
import com.extendyourstore.pos.services.giftcard.GiftCardConstantsIfc;
import com.extendyourstore.pos.ui.DialogScreensIfc;
import com.extendyourstore.pos.ui.POSUIManagerIfc;
import com.extendyourstore.pos.ui.beans.DialogBeanModel;
import com.extendyourstore.pos.ui.beans.GiftCardBeanModel;
import com.extendyourstore.pos.ui.beans.PromptAndResponseModel;
import com.max.domain.stock.MAXGiftCardPLUItem;
import com.max.domain.stock.MAXGiftCardPLUItemIfc;
import com.max.domain.utility.MAXGiftCard;
import com.max.domain.utility.MAXGiftCardIfc;
import com.max.pos.services.giftcard.MAXGiftCardCargo;
import com.max.pos.services.giftcard.MAXGiftCardUtilities;
import com.max.pos.services.qc.MAXGiftCardUtilitiesQC;
import com.max.pos.ui.MAXPOSUIManagerIfc;
import com.qwikcilver.clientapi.svpos.GCPOS;

public class MAXGiftCardIssueCardNumEnteredAisle extends PosLaneActionAdapter implements GiftCardConstantsIfc {
	/**
	 * 
	 */
	private static final long serialVersionUID = 8858882899593712764L;
	/**
	 * class name
	 **/
	public static final String LANENAME = "GiftCardIssueCardNumEnteredAisle";
	/**
	 * revision number
	 **/
	public static final String revisionNumber = "$Revision: 1.7 $";
	// static GCPOS pos;
	

	// ----------------------------------------------------------------------
	/**
	 * Get the data entered on the Gift Card screen or from MSR Validate and
	 * save the gift card number. Send the 'Continue' letter
	 * <p>
	 * 
	 * @param bus
	 *            the bus traversing this lane
	 **/
	// ----------------------------------------------------------------------
	public void traverse(BusIfc bus) {

		/*
		 * read the data from the UI
		 */
		POSUIManagerIfc ui = (POSUIManagerIfc) bus.getManager(UIManagerIfc.TYPE);
		UtilityManagerIfc utility = (UtilityManagerIfc) bus.getManager(UtilityManagerIfc.TYPE);
		ParameterManagerIfc pm = (ParameterManagerIfc) bus.getManager(ParameterManagerIfc.TYPE);
		// Gift Card not getting accepted at QC after swiping
		String cardNumber = null;
		String cardNum = ui.getInput();
		String var1 = ";";
		String var2 = "=";
		String var3 = "?";
		String trackData = null;
		DialogBeanModel dialogModel = new DialogBeanModel(); // Rev 1.0 changes
		boolean isSwiped = false;
		boolean isScanned = false;
		MAXGiftCardUtilitiesQC utilObj = new MAXGiftCardUtilitiesQC();

		GCPOS pos = utilObj.getInstance();
		// parModel.getPromptAndResponseModel().getMSRModel();

	        if(cardNum != null && cardNum.length()!= 0)
		{
			if(cardNum.length() > 28)
				isSwiped = true;
			else if(cardNum.length() == 26)
				isScanned = true;
		}
		
		
		//String cardNumberTracked = null;
		
		if(isScanned)
		{
			trackData =  ui.getInput();
			cardNumber = utilObj.getCardNumberFromTrackData(ui.getInput(),true);
		}
		else if(isSwiped)
		{
			trackData = var1 + cardNum.substring(0, 16) + var2 + cardNum.substring(16) + var3;
			cardNumber = utilObj.getCardNumberFromTrackData(trackData,true);
		}
		
		
		/*if (cardNum.length() > 16) {
			trackData = var1 + cardNum.substring(0, 16) + var2 + cardNum.substring(16) + var3;
			cardNumber = cardNum.substring(0, 16);
			///isSwiped = true;

		} else {
			cardNumber = cardNum;
		}*/
		// Gift Card not getting accepted at QC after swiping ends here
		boolean duplicate = false;
		boolean giftCardExists = false;
		MAXGiftCardCargo cargo = (MAXGiftCardCargo) bus.getCargo();
		// GiftCardBeanModel model = (GiftCardBeanModel)
		// ui.getModel(POSUIManagerIfc.SELL_GIFT_CARD);
		GiftCardBeanModel model = (GiftCardBeanModel) ui.getModel(POSUIManagerIfc.GET_CARD_NUM_FOR_GIFT_CARD); // Added
																												// by
		if (isSwiped) {
			model.setSwiped(true);
			// model.setTrackData(trackData);
		}
		RetailTransactionIfc retailTransaction = cargo.getRetailTransactionIfc();
		SaleReturnLineItemIfc[] items = null;
		if (retailTransaction != null)
			items = retailTransaction.getProductGroupLineItems(ProductGroupConstantsIfc.PRODUCT_GROUP_GIFT_CARD);

		if (items != null && items.length != 0) {
			for (int j = 0; j < items.length; j++) {
				if (items[j].getPLUItem() instanceof GiftCardPLUItem) {
					MAXGiftCardPLUItemIfc gfItem = (MAXGiftCardPLUItemIfc) items[j].getPLUItem();
					MAXGiftCard giftCard = (MAXGiftCard) gfItem.getGiftCard();
					if (isSwiped) {
					 giftCard.setSwiped(true);
					 giftCard.setTrackData(trackData);
					}
					if (cardNumber.equals(giftCard.getCardNumber())) {
						duplicate = true;
					}
				}
			}
		}
		if (duplicate) {
			ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE, MAXGiftCardUtilities.createDupllicateGiftCardNumErrorDialogModel());
			duplicate = false;
			return;
		}
		if (giftCardExists) {
			ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE, MAXGiftCardUtilities.createAlreadyGiftCardNumErrorDialogModel());
			giftCardExists = false;
			return;
		}

		boolean noError = true;
		// boolean multipleCard = false;
		String denominationAmount = null;
		MAXGiftCardIfc giftCard = (MAXGiftCardIfc) cargo.getGiftCard();
		//MGGiftCardUtilitiesQC utilObj = new MGGiftCardUtilitiesQC();

		//GCPOS pos = utilObj.getInstance();
		if (pos != null) {
			denominationAmount = giftCard.getInitialBalance().toString();
			// POSBaseBeanModel pmodel = (POSBaseBeanModel) ui.getModel();
			PromptAndResponseModel parModel = model.getPromptAndResponseModel();

			parModel.getMSRModel();// .getTrack2Data();
			// POSUIManagerIfc ui =
			// (POSUIManagerIfc)bus.getManager(UIManagerIfc.TYPE);
			ui.showScreen(MAXPOSUIManagerIfc.GIFT_CARD_VALIDATING_SCREEN, model);
			HashMap balanceEnquiryMap = null;
			String notes = null;
			notes = "{VldType~GCACT|AMT~" + denominationAmount +"}";
			/*if (!isSwiped)
			{
				cardNumber = utilObj.getCardNumberFromTrackData(trackData,true);
				balanceEnquiryMap = utilObj.balanceEnquiry(pos, cardNumber, denominationAmount, "BLC");
			}
			else
			{*/
				//cardNumber = utilObj.getCardNumberFromTrackData(trackData,true);
				balanceEnquiryMap = utilObj.balanceEnquiryWithNotes(pos, cardNumber,trackData , notes);
				//balanceEnquiryMap = utilObj.balanceEnquiryUsingTrackData(pos, cardNumber, denominationAmount, "BLC", trackData);
			//}

			if (logger.isInfoEnabled()) {
				logger.info("GiftCardIssueCardNumEnteredAisle.traverse(), cardNumber = " + cardNumber + "");
			}

			LetterIfc letter = null;
			if (MAXGiftCardUtilities.isEmpty(model, cardNumber, logger, bus.getServiceName())) {
				noError = false;
				parModel = model.getPromptAndResponseModel();
				if ((parModel != null) && parModel.isSwiped()) {
					ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE, MAXGiftCardUtilities.createBadMSRReadDialogModel(utility));
				} else {
					ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE, MAXGiftCardUtilities.createInvalidGiftCardNumErrorDialogModel());
				}
			}
			// if (noError && balanceEnquiryMap.get("Expiry") != null &&
			// ("0").equals(balanceEnquiryMap.get("ResponseCode").toString())) {

			if (balanceEnquiryMap != null && balanceEnquiryMap.get("Expiry") == null && balanceEnquiryMap.get("TerminalId")!=null) { //Rev 1.1 changes
				noError = false;
				//change start for issue During activate transaction if QC is returning card expired message, 
				//pos is showing wrong message Should show QC returned error message.
				//ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE,GiftCardUtilities.createInvalidGiftCardNumErrorDialogModel());
				if (balanceEnquiryMap != null && balanceEnquiryMap.size() != 0) {
					String msg[] = new String[7];
					dialogModel.setResourceID("GIFTCARD_ENQUIRYQC");
					msg[0] = "<<--||--:: Please Find The GiftCard Details As Below ::--||-->>";
					if (balanceEnquiryMap.get("CardNumber") != null	&& !(balanceEnquiryMap.get("CardNumber").toString().equalsIgnoreCase(""))) {
						String giftCardNum = balanceEnquiryMap.get("CardNumber").toString();
						msg[1] = "GIFTCard"	+ " "+ giftCardNum.substring(giftCardNum.length() - 4,giftCardNum.length());
					}
					msg[2] = " Total Amount In This Card Is " + balanceEnquiryMap.get("Amount");
					if (balanceEnquiryMap.get("Expiry") != null && !("null").equals(balanceEnquiryMap.get("Expiry")))
						msg[3] = "Expiry Date " + utilObj.calculateEYSDate(balanceEnquiryMap.get("Expiry").toString());
					else
						msg[3] = "Expiry Date : N/A ";
					msg[4] = balanceEnquiryMap.get("ResponseMessage").toString();
					if (balanceEnquiryMap.get("AcquirerId") != null)
						msg[5] = balanceEnquiryMap.get("AcquirerId").toString();
					else {
						msg[5] = "Could Not Validate Card";
					}
					msg[6] = "::Thanks::";
					dialogModel.setArgs(msg);
					dialogModel.setType(DialogScreensIfc.CONFIRMATION);
					dialogModel.setType(DialogScreensIfc.ACKNOWLEDGEMENT);
					dialogModel.setButtonLetter(DialogScreensIfc.BUTTON_OK,	"InvalidCardNumber");
					ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE, dialogModel);

				}
				//change End for issue During activate transaction if QC is returning card expired message, 
				//pos is showing wrong message Should show QC returned error message.
				
			} else if((balanceEnquiryMap.get("Expiry")!=null)&& (!("null").equals(balanceEnquiryMap.get("Expiry").toString()))) {
				noError = false;
				// ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE,
				// GiftCardUtilities.createActivatedGiftCardNumErrorDialogModel());
				// code start for issue Error message from QC are not
				// properly displayed
//				if (isSwiped) {
//					 giftCard.setSwiped(true);
//					 giftCard.setTrackData(trackData);
//					}
				if (balanceEnquiryMap != null && balanceEnquiryMap.size() != 0) {
					String msg[] = new String[7];
					dialogModel.setResourceID("GIFTCARD_ENQUIRYQC");
					msg[0] = "<<--||--:: Please Find The GiftCard Details As Below ::--||-->>";
					if (balanceEnquiryMap.get("CardNumber") != null	&& !(balanceEnquiryMap.get("CardNumber").toString().equalsIgnoreCase(""))) {
						String giftCardNum = balanceEnquiryMap.get("CardNumber").toString();
						msg[1] = "GIFTCard"	+ " "+ giftCardNum.substring(giftCardNum.length() - 4,giftCardNum.length());
					}
					if (balanceEnquiryMap.get("Amount") != null	&& !(balanceEnquiryMap.get("Amount").toString()	.equalsIgnoreCase(""))) {
						msg[2] = " Total Amount In This Card Is "+ balanceEnquiryMap.get("Amount").toString()
								+ " "+ balanceEnquiryMap.get("CardCurrencySymbol").toString();
					}
					if (balanceEnquiryMap.get("Expiry") != null)
						msg[3] = "ExpiryDate "+ utilObj.calculateEYSDate(balanceEnquiryMap.get("Expiry").toString());
					msg[4] = "Gift card number entered is Already Active OR Invalid";
					if (balanceEnquiryMap.get("CardType") != null)
						msg[5] = balanceEnquiryMap.get("CardType").toString();
					msg[6] = "::Thanks::";
					dialogModel.setArgs(msg);
					dialogModel.setType(DialogScreensIfc.CONFIRMATION);
					dialogModel.setType(DialogScreensIfc.ACKNOWLEDGEMENT);
					dialogModel.setButtonLetter(DialogScreensIfc.BUTTON_OK,	"InvalidCardNumber");
					ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE, dialogModel);

				} else {
					ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE,MAXGiftCardUtilities.createActivatedGiftCardNumErrorDialogModel());
				}
				// code End for issue Error message from QC are not
				// properly displayed
			}else if(balanceEnquiryMap != null && balanceEnquiryMap.size() != 0 && (!("10029").equals(balanceEnquiryMap.get("ResponseCode").toString()))&&(balanceEnquiryMap.get("TerminalId")!=null)){ //rev 1.1 changes
				noError = false;
				String msg[] = new String[7];
//				if (isSwiped) {
//					 giftCard.setSwiped(true);
//					 giftCard.setTrackData(trackData);
//					}
				dialogModel.setResourceID("GIFTCARD_ENQUIRYQC");
				msg[0] = "<<--||--:: Please Find The GiftCard Details As Below ::--||-->>";
				if (balanceEnquiryMap.get("CardNumber") != null	&& !(balanceEnquiryMap.get("CardNumber").toString().equalsIgnoreCase(""))) {
					String giftCardNum = balanceEnquiryMap.get("CardNumber").toString();
					msg[1] = "GIFTCard"	+ " "+ giftCardNum.substring(giftCardNum.length() - 4,giftCardNum.length());
				}
				msg[2] = " Total Amount In This Card Is " + balanceEnquiryMap.get("Amount");
				if (balanceEnquiryMap.get("Expiry") != null && !("null").equals(balanceEnquiryMap.get("Expiry")))
					msg[3] = "Expiry Date " + utilObj.calculateEYSDate(balanceEnquiryMap.get("Expiry").toString());
				else
					msg[3] = "Expiry Date : N/A ";
				msg[4] = balanceEnquiryMap.get("ResponseMessage").toString();
				if (balanceEnquiryMap.get("AcquirerId") != null)
					msg[5] = balanceEnquiryMap.get("AcquirerId").toString();
				else {
					msg[5] = "Could Not Validate Card";
				}
				msg[6] = "::Thanks::";
				dialogModel.setArgs(msg);
				dialogModel.setType(DialogScreensIfc.CONFIRMATION);
				dialogModel.setType(DialogScreensIfc.ACKNOWLEDGEMENT);
				dialogModel.setButtonLetter(DialogScreensIfc.BUTTON_OK,	"InvalidCardNumber");
				ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE, dialogModel);
			}	else if (balanceEnquiryMap.get("Amount") == null && balanceEnquiryMap.get("TerminalId")==null) {  //Rev 1.1 changes
				noError = false;
				String msg[] = new String[7];
				dialogModel.setResourceID("GIFTCARD_ENQUIRYQC");
				msg[0] = " ";
				msg[1] = "Gift Card cannot be issued";
				msg[2] = " due to network offline";   //" Total Amount In This Card Is " + balanceEnquiryMap.get("Amount");
				msg[3] = "Press Enter button to return to previous screen";
				msg[4] = " ";
				msg[5] = " ";
				msg[6] = " ";
				msg[6] = "::Thanks::";
				dialogModel.setArgs(msg);
				dialogModel.setType(DialogScreensIfc.ERROR);
				dialogModel.setButtonLetter(DialogScreensIfc.BUTTON_OK, "Undo");

				ui.showScreen(POSUIManagerIfc.DIALOG_TEMPLATE, dialogModel);

			}

			if (noError) {
				MAXGiftCardPLUItemIfc pluItem = (MAXGiftCardPLUItemIfc) cargo.getPLUItem();

				if (pluItem == null) {
					String itemID = "0";
					try {
						itemID = pm.getStringValue(DEFAULT_GIFT_CARD_ITEM_ID);
					} catch (ParameterException e) {
						itemID = DEFAULT_ITEM_ID;
						if (logger.isInfoEnabled())
							logger.info("GiftCardIssueCardNumEnteredAisle.traverse(), cannot find default giftCard item.");
					}
					pluItem = MAXGiftCardUtilities.getPluItem(ui, cargo, itemID, logger, bus.getServiceName(), true);
				}
				if (pluItem != null) {
					CurrencyIfc amount = giftCard.getCurrentBalance();
					if (cargo.getGcType() != null && ("promoGiftCard").equals(cargo.getGcType())) {
						amount = DomainGateway.getBaseCurrencyInstance(new BigDecimal("0.0"));
					}
					// CurrencyIfc amount = giftCard.getCurrentBalance();
					giftCard.setCardNumber(cardNumber);
					giftCard.setTrackData(trackData);
					/**
					 * Fixed the GiftCard swiping issue while using multiple
					 * cards -- Jyoti
					 */
					if (isSwiped) {
									 giftCard.setSwiped(true);
									// giftCard.setTrackData(trackData);
									// ((LSIPLGiftCardPLUItem)
									// pluItem).setSwiped(isSwiped);
									 ((MAXGiftCardPLUItem)
									 pluItem).setTrackData(trackData);
					}

					pluItem.setGiftCard(giftCard);
					pluItem.setPrice(amount);
					cargo.setItemQuantity(Util.I_BIG_DECIMAL_ONE);
					cargo.setPLUItem(pluItem);
					String soldDate = "N/A";
					if (giftCard.getDateSold() != null) {
						Locale locale = LocaleMap.getLocale(LocaleConstantsIfc.DEFAULT_LOCALE);
						soldDate = giftCard.getDateSold().toFormattedString(locale);
					}
					JournalManagerIfc jmi = (JournalManagerIfc) Gateway.getDispatcher().getManager(JournalManagerIfc.TYPE);
					StringBuffer journalString = new StringBuffer(giftCard.toJournalString());
					journalString.append("\n    Date Sold: ");
					journalString.append(soldDate);
					journalString.append("\n    Issued.");
					jmi.journal(cargo.getTransaction().getCashier().getLoginID(), cargo.getTransaction().getTransactionID(), journalString.toString());
					letter = new Letter(CommonLetterIfc.CONTINUE);
				}
			}

			if (letter != null) {
				bus.mail(letter, BusIfc.CURRENT);
			}
		} else {
			utilObj.showQCOfflineErrorBox(bus);
		}
	}
	}


